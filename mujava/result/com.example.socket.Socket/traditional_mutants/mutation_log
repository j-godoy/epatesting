AOIU_1:90:int_connect(com.example.socket.MockSocketAddress):RET_OK => -RET_OK
AOIU_2:92:int_connect(com.example.socket.MockSocketAddress):IO_EXCEPTION => -IO_EXCEPTION
AOIU_3:104:int_connect(com.example.socket.MockSocketAddress,int):timeout => -timeout
AOIU_4:105:int_connect(com.example.socket.MockSocketAddress,int):RET_OK => -RET_OK
AOIU_5:107:int_connect(com.example.socket.MockSocketAddress,int):IO_EXCEPTION => -IO_EXCEPTION
AOIU_6:118:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => -timeout
AOIU_7:138:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => -timeout
AOIU_8:140:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => -timeout
AOIU_9:142:void_internal_connect(com.example.socket.MockSocketAddress,int):port => -port
AOIU_10:144:void_internal_connect(com.example.socket.MockSocketAddress,int):port => -port
AOIU_11:165:int_bind(com.example.socket.MockSocketAddress):RET_OK => -RET_OK
AOIU_12:167:int_bind(com.example.socket.MockSocketAddress):IO_EXCEPTION => -IO_EXCEPTION
AOIU_13:193:void_internal_bind(com.example.socket.MockSocketAddress):port => -port
AOIU_14:212:com.example.socket.Pair_getInputStream():RET_OK => -RET_OK
AOIU_15:214:com.example.socket.Pair_getInputStream():IO_EXCEPTION => -IO_EXCEPTION
AOIU_16:250:com.example.socket.Pair_getOutputStream():RET_OK => -RET_OK
AOIU_17:252:com.example.socket.Pair_getOutputStream():IO_EXCEPTION => -IO_EXCEPTION
AOIU_18:303:int_close():RET_OK => -RET_OK
AOIU_19:305:int_close():IO_EXCEPTION => -IO_EXCEPTION
AOIU_20:314:int_shutdownInput():RET_OK => -RET_OK
AOIU_21:316:int_shutdownInput():IO_EXCEPTION => -IO_EXCEPTION
AOIU_22:341:int_shutdownOutput():RET_OK => -RET_OK
AOIU_23:343:int_shutdownOutput():IO_EXCEPTION => -IO_EXCEPTION
AOIS_1:90:int_connect(com.example.socket.MockSocketAddress):RET_OK => RET_OK++
AOIS_2:90:int_connect(com.example.socket.MockSocketAddress):RET_OK => RET_OK--
AOIS_3:92:int_connect(com.example.socket.MockSocketAddress):IO_EXCEPTION => IO_EXCEPTION++
AOIS_4:92:int_connect(com.example.socket.MockSocketAddress):IO_EXCEPTION => IO_EXCEPTION--
AOIS_5:104:int_connect(com.example.socket.MockSocketAddress,int):timeout => timeout++
AOIS_6:104:int_connect(com.example.socket.MockSocketAddress,int):timeout => timeout--
AOIS_7:105:int_connect(com.example.socket.MockSocketAddress,int):RET_OK => RET_OK++
AOIS_8:105:int_connect(com.example.socket.MockSocketAddress,int):RET_OK => RET_OK--
AOIS_9:107:int_connect(com.example.socket.MockSocketAddress,int):IO_EXCEPTION => IO_EXCEPTION++
AOIS_10:107:int_connect(com.example.socket.MockSocketAddress,int):IO_EXCEPTION => IO_EXCEPTION--
AOIS_11:118:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => ++timeout
AOIS_12:118:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => --timeout
AOIS_13:118:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => timeout++
AOIS_14:118:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => timeout--
AOIS_15:138:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => timeout++
AOIS_16:138:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => timeout--
AOIS_17:140:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => ++timeout
AOIS_18:140:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => --timeout
AOIS_19:140:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => timeout++
AOIS_20:140:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => timeout--
AOIS_21:142:void_internal_connect(com.example.socket.MockSocketAddress,int):port => port++
AOIS_22:142:void_internal_connect(com.example.socket.MockSocketAddress,int):port => port--
AOIS_23:144:void_internal_connect(com.example.socket.MockSocketAddress,int):port => port++
AOIS_24:144:void_internal_connect(com.example.socket.MockSocketAddress,int):port => port--
AOIS_25:165:int_bind(com.example.socket.MockSocketAddress):RET_OK => RET_OK++
AOIS_26:165:int_bind(com.example.socket.MockSocketAddress):RET_OK => RET_OK--
AOIS_27:167:int_bind(com.example.socket.MockSocketAddress):IO_EXCEPTION => IO_EXCEPTION++
AOIS_28:167:int_bind(com.example.socket.MockSocketAddress):IO_EXCEPTION => IO_EXCEPTION--
AOIS_29:193:void_internal_bind(com.example.socket.MockSocketAddress):port => port++
AOIS_30:193:void_internal_bind(com.example.socket.MockSocketAddress):port => port--
AOIS_31:212:com.example.socket.Pair_getInputStream():RET_OK => RET_OK++
AOIS_32:212:com.example.socket.Pair_getInputStream():RET_OK => RET_OK--
AOIS_33:214:com.example.socket.Pair_getInputStream():IO_EXCEPTION => IO_EXCEPTION++
AOIS_34:214:com.example.socket.Pair_getInputStream():IO_EXCEPTION => IO_EXCEPTION--
AOIS_35:250:com.example.socket.Pair_getOutputStream():RET_OK => RET_OK++
AOIS_36:250:com.example.socket.Pair_getOutputStream():RET_OK => RET_OK--
AOIS_37:252:com.example.socket.Pair_getOutputStream():IO_EXCEPTION => IO_EXCEPTION++
AOIS_38:252:com.example.socket.Pair_getOutputStream():IO_EXCEPTION => IO_EXCEPTION--
AOIS_39:303:int_close():RET_OK => RET_OK++
AOIS_40:303:int_close():RET_OK => RET_OK--
AOIS_41:305:int_close():IO_EXCEPTION => IO_EXCEPTION++
AOIS_42:305:int_close():IO_EXCEPTION => IO_EXCEPTION--
AOIS_43:314:int_shutdownInput():RET_OK => RET_OK++
AOIS_44:314:int_shutdownInput():RET_OK => RET_OK--
AOIS_45:316:int_shutdownInput():IO_EXCEPTION => IO_EXCEPTION++
AOIS_46:316:int_shutdownInput():IO_EXCEPTION => IO_EXCEPTION--
AOIS_47:341:int_shutdownOutput():RET_OK => RET_OK++
AOIS_48:341:int_shutdownOutput():RET_OK => RET_OK--
AOIS_49:343:int_shutdownOutput():IO_EXCEPTION => IO_EXCEPTION++
AOIS_50:343:int_shutdownOutput():IO_EXCEPTION => IO_EXCEPTION--
ROR_1:53:void_createImpl(boolean): impl == null  =>   impl != null
ROR_2:66:void_setImpl(): factory != null  =>   factory == null
ROR_3:71:void_setImpl(): impl != null  =>   impl == null
ROR_4:115:void_internal_connect(com.example.socket.MockSocketAddress,int): endpoint == null  =>   endpoint != null
ROR_5:118:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout < 0  =>   timeout > 0
ROR_6:118:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout < 0  =>   timeout >= 0
ROR_7:118:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout < 0  =>   timeout <= 0
ROR_8:118:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout < 0  =>   timeout == 0
ROR_9:118:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout < 0  =>   timeout != 0
ROR_10:118:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout < 0  =>   true
ROR_11:118:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout < 0  =>   false
ROR_12:140:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout == 0  =>   timeout > 0
ROR_13:140:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout == 0  =>   timeout >= 0
ROR_14:140:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout == 0  =>   timeout < 0
ROR_15:140:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout == 0  =>   timeout <= 0
ROR_16:140:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout == 0  =>   timeout != 0
ROR_17:140:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout == 0  =>   true
ROR_18:140:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout == 0  =>   false
ROR_19:180:void_internal_bind(com.example.socket.MockSocketAddress): bindpoint != null  =>   bindpoint == null
ROR_20:184:void_internal_bind(com.example.socket.MockSocketAddress): epoint != null  =>   epoint == null
ROR_21:187:void_internal_bind(com.example.socket.MockSocketAddress): epoint == null  =>   epoint != null
ROR_22:199:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String): addr == null  =>   addr != null
COR_1:124:void_internal_connect(com.example.socket.MockSocketAddress,int): !oldImpl && isConnected()  =>   !oldImpl || isConnected()
COR_2:124:void_internal_connect(com.example.socket.MockSocketAddress,int): !oldImpl && isConnected()  =>   !oldImpl ^ isConnected()
COR_3:177:void_internal_bind(com.example.socket.MockSocketAddress): !oldImpl && isBound()  =>   !oldImpl || isBound()
COR_4:177:void_internal_bind(com.example.socket.MockSocketAddress): !oldImpl && isBound()  =>   !oldImpl ^ isBound()
COR_5:180:void_internal_bind(com.example.socket.MockSocketAddress): bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)  =>   bindpoint != null || !(bindpoint instanceof com.example.socket.MockInetSocketAddress)
COR_6:180:void_internal_bind(com.example.socket.MockSocketAddress): bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)  =>   bindpoint != null ^ !(bindpoint instanceof com.example.socket.MockInetSocketAddress)
COR_7:184:void_internal_bind(com.example.socket.MockSocketAddress): epoint != null && epoint.isUnresolved()  =>   epoint != null || epoint.isUnresolved()
COR_8:184:void_internal_bind(com.example.socket.MockSocketAddress): epoint != null && epoint.isUnresolved()  =>   epoint != null ^ epoint.isUnresolved()
COR_9:202:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String): addr instanceof com.example.socket.MockInet4Address || addr instanceof com.example.socket.MockInet6Address  =>   addr instanceof com.example.socket.MockInet4Address && addr instanceof com.example.socket.MockInet6Address
COR_10:202:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String): addr instanceof com.example.socket.MockInet4Address || addr instanceof com.example.socket.MockInet6Address  =>   addr instanceof com.example.socket.MockInet4Address ^ addr instanceof com.example.socket.MockInet6Address
COR_11:365:boolean_isConnected(): connected || oldImpl  =>   connected && oldImpl
COR_12:365:boolean_isConnected(): connected || oldImpl  =>   connected ^ oldImpl
COR_13:370:boolean_isBound(): bound || oldImpl  =>   bound && oldImpl
COR_14:370:boolean_isBound(): bound || oldImpl  =>   bound ^ oldImpl
COD_1:79:com.example.socket.MockSocketImpl_getImpl():!created => created
COD_2:124:void_internal_connect(com.example.socket.MockSocketAddress,int):!oldImpl => oldImpl
COD_3:127:void_internal_connect(com.example.socket.MockSocketAddress,int):!(endpoint instanceof com.example.socket.MockInetSocketAddress) => endpoint instanceof com.example.socket.MockInetSocketAddress
COD_4:134:void_internal_connect(com.example.socket.MockSocketAddress,int):!created => created
COD_5:137:void_internal_connect(com.example.socket.MockSocketAddress,int):!oldImpl => oldImpl
COD_6:154:void_internal_connect(com.example.socket.MockSocketAddress,int):!connected => connected
COD_7:177:void_internal_bind(com.example.socket.MockSocketAddress):!oldImpl => oldImpl
COD_8:180:void_internal_bind(com.example.socket.MockSocketAddress):!(bindpoint instanceof com.example.socket.MockInetSocketAddress) => bindpoint instanceof com.example.socket.MockInetSocketAddress
COD_9:202:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String):!(addr instanceof com.example.socket.MockInet4Address || addr instanceof com.example.socket.MockInet6Address) => addr instanceof com.example.socket.MockInet4Address || addr instanceof com.example.socket.MockInet6Address
COD_10:224:java.io.InputStream_internal_getInputStream():!isConnected() => isConnected()
COD_11:262:java.io.OutputStream_internal_getOutputStream():!isConnected() => isConnected()
COD_12:326:void_internal_shutdownInput():!isConnected() => isConnected()
COD_13:353:void_internal_shutdownOutput():!isConnected() => isConnected()
COI_1:53:void_createImpl(boolean): impl == null  =>  !(impl == null)
COI_2:57:void_createImpl(boolean): stream  =>  !stream
COI_3:58:void_createImpl(boolean): created  =>  !created
COI_4:66:void_setImpl(): factory != null  =>  !(factory != null)
COI_5:71:void_setImpl(): impl != null  =>  !(impl != null)
COI_6:115:void_internal_connect(com.example.socket.MockSocketAddress,int): endpoint == null  =>  !(endpoint == null)
COI_7:118:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout < 0  =>  !(timeout < 0)
COI_8:124:void_internal_connect(com.example.socket.MockSocketAddress,int): !oldImpl && isConnected()  =>  !(!oldImpl && isConnected())
COI_9:140:void_internal_connect(com.example.socket.MockSocketAddress,int): timeout == 0  =>  !(timeout == 0)
COI_10:150:void_internal_connect(com.example.socket.MockSocketAddress,int): connected  =>  !connected
COI_11:151:void_internal_connect(com.example.socket.MockSocketAddress,int): bound  =>  !bound
COI_12:177:void_internal_bind(com.example.socket.MockSocketAddress): !oldImpl && isBound()  =>  !(!oldImpl && isBound())
COI_13:180:void_internal_bind(com.example.socket.MockSocketAddress): bindpoint != null  =>  !(bindpoint != null)
COI_14:180:void_internal_bind(com.example.socket.MockSocketAddress): bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)  =>  !(bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress))
COI_15:184:void_internal_bind(com.example.socket.MockSocketAddress): epoint != null  =>  !(epoint != null)
COI_16:184:void_internal_bind(com.example.socket.MockSocketAddress): epoint != null && epoint.isUnresolved()  =>  !(epoint != null && epoint.isUnresolved())
COI_17:187:void_internal_bind(com.example.socket.MockSocketAddress): epoint == null  =>  !(epoint == null)
COI_18:194:void_internal_bind(com.example.socket.MockSocketAddress): bound  =>  !bound
COI_19:199:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String): addr == null  =>  !(addr == null)
COI_20:291:void_internal_close(): created  =>  !created
COI_21:294:void_internal_close(): closed  =>  !closed
COI_22:333:void_internal_shutdownInput(): shutIn  =>  !shutIn
COI_23:360:void_internal_shutdownOutput(): shutOut  =>  !shutOut
COI_24:365:boolean_isConnected(): connected  =>  !connected
COI_25:365:boolean_isConnected(): oldImpl  =>  !oldImpl
COI_26:365:boolean_isConnected(): connected || oldImpl  =>  !(connected || oldImpl)
COI_27:370:boolean_isBound(): bound  =>  !bound
COI_28:370:boolean_isBound(): oldImpl  =>  !oldImpl
COI_29:370:boolean_isBound(): bound || oldImpl  =>  !(bound || oldImpl)
COI_30:377:boolean_isClosed(): closed  =>  !closed
COI_31:383:boolean_isInputShutdown(): shutIn  =>  !shutIn
COI_32:388:boolean_isOutputShutdown(): shutOut  =>  !shutOut
LOI_1:90:int_connect(com.example.socket.MockSocketAddress):RET_OK => ~RET_OK
LOI_2:92:int_connect(com.example.socket.MockSocketAddress):IO_EXCEPTION => ~IO_EXCEPTION
LOI_3:104:int_connect(com.example.socket.MockSocketAddress,int):timeout => ~timeout
LOI_4:105:int_connect(com.example.socket.MockSocketAddress,int):RET_OK => ~RET_OK
LOI_5:107:int_connect(com.example.socket.MockSocketAddress,int):IO_EXCEPTION => ~IO_EXCEPTION
LOI_6:118:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => ~timeout
LOI_7:138:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => ~timeout
LOI_8:140:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout => ~timeout
LOI_9:142:void_internal_connect(com.example.socket.MockSocketAddress,int):port => ~port
LOI_10:144:void_internal_connect(com.example.socket.MockSocketAddress,int):port => ~port
LOI_11:165:int_bind(com.example.socket.MockSocketAddress):RET_OK => ~RET_OK
LOI_12:167:int_bind(com.example.socket.MockSocketAddress):IO_EXCEPTION => ~IO_EXCEPTION
LOI_13:193:void_internal_bind(com.example.socket.MockSocketAddress):port => ~port
LOI_14:212:com.example.socket.Pair_getInputStream():RET_OK => ~RET_OK
LOI_15:214:com.example.socket.Pair_getInputStream():IO_EXCEPTION => ~IO_EXCEPTION
LOI_16:250:com.example.socket.Pair_getOutputStream():RET_OK => ~RET_OK
LOI_17:252:com.example.socket.Pair_getOutputStream():IO_EXCEPTION => ~IO_EXCEPTION
LOI_18:303:int_close():RET_OK => ~RET_OK
LOI_19:305:int_close():IO_EXCEPTION => ~IO_EXCEPTION
LOI_20:314:int_shutdownInput():RET_OK => ~RET_OK
LOI_21:316:int_shutdownInput():IO_EXCEPTION => ~IO_EXCEPTION
LOI_22:341:int_shutdownOutput():RET_OK => ~RET_OK
LOI_23:343:int_shutdownOutput():IO_EXCEPTION => ~IO_EXCEPTION
SDL_1:42:Socket(com.example.socket.MockEnvironment): this.env = env; setImpl();  =>   setImpl();
SDL_2:42:Socket(com.example.socket.MockEnvironment): this.env = env; setImpl();  =>   this.env = env;
SDL_3:59:void_createImpl(boolean): if (impl == null) {     setImpl(); } try {     impl.create( stream );     created = true; } catch ( java.io.IOException e ) {     throw new java.net.SocketException( e.getMessage() ); }  =>   try {     impl.create( stream );     created = true; } catch ( java.io.IOException e ) {     throw new java.net.SocketException( e.getMessage() ); }
SDL_4:54:void_createImpl(boolean): setImpl();  =>  
SDL_5:56:void_createImpl(boolean): if (impl == null) {     setImpl(); }  =>   if (true) {     setImpl(); }
SDL_6:59:void_createImpl(boolean): try {     impl.create( stream );     created = true; } catch ( java.io.IOException e ) {     throw new java.net.SocketException( e.getMessage() ); }  =>   try {     created = true; }
SDL_7:59:void_createImpl(boolean): try {     impl.create( stream );     created = true; } catch ( java.io.IOException e ) {     throw new java.net.SocketException( e.getMessage() ); }  =>   try {     impl.create( stream ); }
SDL_8:69:void_setImpl(): if (factory != null) {     impl = factory.createSocketImpl( env ); } else {     impl = new com.example.socket.MockSocketImpl( env ); } if (impl != null) {     impl.setSocket( this ); }  =>   if (impl != null) {     impl.setSocket( this ); }
SDL_9:71:void_setImpl(): if (factory != null) {     impl = factory.createSocketImpl( env ); } else {     impl = new com.example.socket.MockSocketImpl( env ); } if (impl != null) {     impl.setSocket( this ); }  =>   if (factory != null) {     impl = factory.createSocketImpl( env ); } else {     impl = new com.example.socket.MockSocketImpl( env ); }
SDL_10:67:void_setImpl(): impl = factory.createSocketImpl( env );  =>  
SDL_11:71:void_setImpl(): if (factory != null) {     impl = factory.createSocketImpl( env ); } else {     impl = new com.example.socket.MockSocketImpl( env ); }  =>   if (true) {     impl = factory.createSocketImpl( env ); } else {     impl = new com.example.socket.MockSocketImpl( env ); }
SDL_12:69:void_setImpl(): impl = new com.example.socket.MockSocketImpl( env );  =>  
SDL_13:72:void_setImpl(): impl.setSocket( this );  =>  
SDL_14:74:void_setImpl(): if (impl != null) {     impl.setSocket( this ); }  =>   if (true) {     impl.setSocket( this ); }
SDL_15:80:com.example.socket.MockSocketImpl_getImpl(): if (!created) {     createImpl( true ); } return impl;  =>   return impl;
SDL_16:80:com.example.socket.MockSocketImpl_getImpl(): createImpl( true );  =>  
SDL_17:82:com.example.socket.MockSocketImpl_getImpl(): if (!created) {     createImpl( true ); }  =>   if (true) {     createImpl( true ); }
SDL_18:91:int_connect(com.example.socket.MockSocketAddress): try {     internal_connect( endpoint, 0 );     return RET_OK; } catch ( com.example.socket.MockIOException ex ) {     return IO_EXCEPTION; }  =>   try {     return RET_OK; }
SDL_19:91:int_connect(com.example.socket.MockSocketAddress): return RET_OK;  =>   return 0;
SDL_20:106:int_connect(com.example.socket.MockSocketAddress,int): try {     internal_connect( endpoint, timeout );     return RET_OK; } catch ( com.example.socket.MockIOException ex ) {     return IO_EXCEPTION; }  =>   try {     return RET_OK; }
SDL_21:106:int_connect(com.example.socket.MockSocketAddress,int): return RET_OK;  =>   return 0;
SDL_22:166:int_bind(com.example.socket.MockSocketAddress): try {     internal_bind( bindpoint );     return RET_OK; } catch ( com.example.socket.MockIOException ex ) {     return IO_EXCEPTION; }  =>   try {     return RET_OK; }
SDL_23:166:int_bind(com.example.socket.MockSocketAddress): return RET_OK;  =>   return 0;
SDL_24:192:void_internal_bind(com.example.socket.MockSocketAddress): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); getImpl().bind( addr, port ); bound = true;  =>   if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); getImpl().bind( addr, port ); bound = true;
SDL_25:192:void_internal_bind(com.example.socket.MockSocketAddress): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); getImpl().bind( addr, port ); bound = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); getImpl().bind( addr, port ); bound = true;
SDL_26:192:void_internal_bind(com.example.socket.MockSocketAddress): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); getImpl().bind( addr, port ); bound = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); getImpl().bind( addr, port ); bound = true;
SDL_27:192:void_internal_bind(com.example.socket.MockSocketAddress): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); getImpl().bind( addr, port ); bound = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); getImpl().bind( addr, port ); bound = true;
SDL_28:192:void_internal_bind(com.example.socket.MockSocketAddress): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); getImpl().bind( addr, port ); bound = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); getImpl().bind( addr, port ); bound = true;
SDL_29:194:void_internal_bind(com.example.socket.MockSocketAddress): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); getImpl().bind( addr, port ); bound = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); getImpl().bind( addr, port ); bound = true;
SDL_30:194:void_internal_bind(com.example.socket.MockSocketAddress): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); getImpl().bind( addr, port ); bound = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); bound = true;
SDL_31:194:void_internal_bind(com.example.socket.MockSocketAddress): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); getImpl().bind( addr, port ); bound = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); } if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); } com.example.socket.MockInetSocketAddress epoint = (com.example.socket.MockInetSocketAddress) bindpoint; if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); } if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); } com.example.socket.MockInetAddress addr = epoint.getAddress(); int port = epoint.getPort(); checkAddress( addr, \"bind\" ); getImpl().bind( addr, port );
SDL_32:175:void_internal_bind(com.example.socket.MockSocketAddress): throw new java.net.SocketException( \"Socket is closed\" );  =>  
SDL_33:177:void_internal_bind(com.example.socket.MockSocketAddress): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Socket is closed\" ); }
SDL_34:178:void_internal_bind(com.example.socket.MockSocketAddress): throw new java.net.SocketException( \"Already bound\" );  =>  
SDL_35:180:void_internal_bind(com.example.socket.MockSocketAddress): if (!oldImpl && isBound()) {     throw new java.net.SocketException( \"Already bound\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Already bound\" ); }
SDL_36:181:void_internal_bind(com.example.socket.MockSocketAddress): throw new java.lang.IllegalArgumentException( \"Unsupported address type\" );  =>  
SDL_37:183:void_internal_bind(com.example.socket.MockSocketAddress): if (bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress)) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( \"Unsupported address type\" ); }
SDL_38:185:void_internal_bind(com.example.socket.MockSocketAddress): throw new java.net.SocketException( \"Unresolved address\" );  =>  
SDL_39:187:void_internal_bind(com.example.socket.MockSocketAddress): if (epoint != null && epoint.isUnresolved()) {     throw new java.net.SocketException( \"Unresolved address\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Unresolved address\" ); }
SDL_40:188:void_internal_bind(com.example.socket.MockSocketAddress): epoint = new com.example.socket.MockInetSocketAddress( 0 );  =>  
SDL_41:190:void_internal_bind(com.example.socket.MockSocketAddress): if (epoint == null) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); }  =>   if (true) {     epoint = new com.example.socket.MockInetSocketAddress( 0 ); }
SDL_42:202:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String): if (addr == null) {     return; } if (!(addr instanceof com.example.socket.MockInet4Address || addr instanceof com.example.socket.MockInet6Address)) {     throw new java.lang.IllegalArgumentException( op + \": invalid address type\" ); }  =>   if (!(addr instanceof com.example.socket.MockInet4Address || addr instanceof com.example.socket.MockInet6Address)) {     throw new java.lang.IllegalArgumentException( op + \": invalid address type\" ); }
SDL_43:202:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String): if (addr == null) {     return; } if (!(addr instanceof com.example.socket.MockInet4Address || addr instanceof com.example.socket.MockInet6Address)) {     throw new java.lang.IllegalArgumentException( op + \": invalid address type\" ); }  =>   if (addr == null) {     return; }
SDL_44:202:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String): if (addr == null) {     return; }  =>   if (true) {     return; }
SDL_45:203:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String): throw new java.lang.IllegalArgumentException( op + \": invalid address type\" );  =>  
SDL_46:205:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String): if (!(addr instanceof com.example.socket.MockInet4Address || addr instanceof com.example.socket.MockInet6Address)) {     throw new java.lang.IllegalArgumentException( op + \": invalid address type\" ); }  =>   if (true) {     throw new java.lang.IllegalArgumentException( op + \": invalid address type\" ); }
SDL_47:240:java.io.InputStream_internal_getInputStream(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is shutdown\" ); } java.io.InputStream is = null; try {     is = AccessController.doPrivileged( new java.security.PrivilegedExceptionAction<InputStream>(){         public  java.io.InputStream run()                 throws java.io.IOException, com.example.socket.MockIOException         {             return impl.getInputStream();         }     } ); } catch ( java.security.PrivilegedActionException e ) {     throw (java.io.IOException) e.getException(); } return is;  =>   if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is shutdown\" ); } java.io.InputStream is = null; try {     is = AccessController.doPrivileged( new java.security.PrivilegedExceptionAction<InputStream>(){         public  java.io.InputStream run()                 throws java.io.IOException, com.example.socket.MockIOException         {             return impl.getInputStream();         }     } ); } catch ( java.security.PrivilegedActionException e ) {     throw (java.io.IOException) e.getException(); } return is;
SDL_48:240:java.io.InputStream_internal_getInputStream(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is shutdown\" ); } java.io.InputStream is = null; try {     is = AccessController.doPrivileged( new java.security.PrivilegedExceptionAction<InputStream>(){         public  java.io.InputStream run()                 throws java.io.IOException, com.example.socket.MockIOException         {             return impl.getInputStream();         }     } ); } catch ( java.security.PrivilegedActionException e ) {     throw (java.io.IOException) e.getException(); } return is;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is shutdown\" ); } java.io.InputStream is = null; try {     is = AccessController.doPrivileged( new java.security.PrivilegedExceptionAction<InputStream>(){         public  java.io.InputStream run()                 throws java.io.IOException, com.example.socket.MockIOException         {             return impl.getInputStream();         }     } ); } catch ( java.security.PrivilegedActionException e ) {     throw (java.io.IOException) e.getException(); } return is;
SDL_49:240:java.io.InputStream_internal_getInputStream(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is shutdown\" ); } java.io.InputStream is = null; try {     is = AccessController.doPrivileged( new java.security.PrivilegedExceptionAction<InputStream>(){         public  java.io.InputStream run()                 throws java.io.IOException, com.example.socket.MockIOException         {             return impl.getInputStream();         }     } ); } catch ( java.security.PrivilegedActionException e ) {     throw (java.io.IOException) e.getException(); } return is;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } java.io.InputStream is = null; try {     is = AccessController.doPrivileged( new java.security.PrivilegedExceptionAction<InputStream>(){         public  java.io.InputStream run()                 throws java.io.IOException, com.example.socket.MockIOException         {             return impl.getInputStream();         }     } ); } catch ( java.security.PrivilegedActionException e ) {     throw (java.io.IOException) e.getException(); } return is;
SDL_50:222:java.io.InputStream_internal_getInputStream(): throw new java.net.SocketException( \"Socket is closed\" );  =>  
SDL_51:224:java.io.InputStream_internal_getInputStream(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Socket is closed\" ); }
SDL_52:225:java.io.InputStream_internal_getInputStream(): throw new java.net.SocketException( \"Socket is not connected\" );  =>  
SDL_53:227:java.io.InputStream_internal_getInputStream(): if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Socket is not connected\" ); }
SDL_54:228:java.io.InputStream_internal_getInputStream(): throw new java.net.SocketException( \"Socket input is shutdown\" );  =>  
SDL_55:230:java.io.InputStream_internal_getInputStream(): if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is shutdown\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Socket input is shutdown\" ); }
SDL_56:233:java.io.InputStream_internal_getInputStream(): try {     is = AccessController.doPrivileged( new java.security.PrivilegedExceptionAction<InputStream>(){         public  java.io.InputStream run()                 throws java.io.IOException, com.example.socket.MockIOException         {             return impl.getInputStream();         }     } ); } catch ( java.security.PrivilegedActionException e ) {     throw (java.io.IOException) e.getException(); }  =>   try { }
SDL_57:278:java.io.OutputStream_internal_getOutputStream(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is shutdown\" ); } java.io.OutputStream os = null; try {     os = AccessController.doPrivileged( new java.security.PrivilegedExceptionAction<OutputStream>(){         public  java.io.OutputStream run()                 throws java.io.IOException, com.example.socket.MockIOException         {             return impl.getOutputStream();         }     } ); } catch ( java.security.PrivilegedActionException e ) {     throw (java.io.IOException) e.getException(); } return os;  =>   if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is shutdown\" ); } java.io.OutputStream os = null; try {     os = AccessController.doPrivileged( new java.security.PrivilegedExceptionAction<OutputStream>(){         public  java.io.OutputStream run()                 throws java.io.IOException, com.example.socket.MockIOException         {             return impl.getOutputStream();         }     } ); } catch ( java.security.PrivilegedActionException e ) {     throw (java.io.IOException) e.getException(); } return os;
SDL_58:278:java.io.OutputStream_internal_getOutputStream(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is shutdown\" ); } java.io.OutputStream os = null; try {     os = AccessController.doPrivileged( new java.security.PrivilegedExceptionAction<OutputStream>(){         public  java.io.OutputStream run()                 throws java.io.IOException, com.example.socket.MockIOException         {             return impl.getOutputStream();         }     } ); } catch ( java.security.PrivilegedActionException e ) {     throw (java.io.IOException) e.getException(); } return os;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is shutdown\" ); } java.io.OutputStream os = null; try {     os = AccessController.doPrivileged( new java.security.PrivilegedExceptionAction<OutputStream>(){         public  java.io.OutputStream run()                 throws java.io.IOException, com.example.socket.MockIOException         {             return impl.getOutputStream();         }     } ); } catch ( java.security.PrivilegedActionException e ) {     throw (java.io.IOException) e.getException(); } return os;
SDL_59:278:java.io.OutputStream_internal_getOutputStream(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is shutdown\" ); } java.io.OutputStream os = null; try {     os = AccessController.doPrivileged( new java.security.PrivilegedExceptionAction<OutputStream>(){         public  java.io.OutputStream run()                 throws java.io.IOException, com.example.socket.MockIOException         {             return impl.getOutputStream();         }     } ); } catch ( java.security.PrivilegedActionException e ) {     throw (java.io.IOException) e.getException(); } return os;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } java.io.OutputStream os = null; try {     os = AccessController.doPrivileged( new java.security.PrivilegedExceptionAction<OutputStream>(){         public  java.io.OutputStream run()                 throws java.io.IOException, com.example.socket.MockIOException         {             return impl.getOutputStream();         }     } ); } catch ( java.security.PrivilegedActionException e ) {     throw (java.io.IOException) e.getException(); } return os;
SDL_60:260:java.io.OutputStream_internal_getOutputStream(): throw new java.net.SocketException( \"Socket is closed\" );  =>  
SDL_61:262:java.io.OutputStream_internal_getOutputStream(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Socket is closed\" ); }
SDL_62:263:java.io.OutputStream_internal_getOutputStream(): throw new java.net.SocketException( \"Socket is not connected\" );  =>  
SDL_63:265:java.io.OutputStream_internal_getOutputStream(): if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Socket is not connected\" ); }
SDL_64:266:java.io.OutputStream_internal_getOutputStream(): throw new java.net.SocketException( \"Socket output is shutdown\" );  =>  
SDL_65:268:java.io.OutputStream_internal_getOutputStream(): if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is shutdown\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Socket output is shutdown\" ); }
SDL_66:271:java.io.OutputStream_internal_getOutputStream(): try {     os = AccessController.doPrivileged( new java.security.PrivilegedExceptionAction<OutputStream>(){         public  java.io.OutputStream run()                 throws java.io.IOException, com.example.socket.MockIOException         {             return impl.getOutputStream();         }     } ); } catch ( java.security.PrivilegedActionException e ) {     throw (java.io.IOException) e.getException(); }  =>   try { }
SDL_67:286:void_internal_close(): synchronized (closeLock) {     if (isClosed()) {         return;     }     if (created) {         impl.close();     }     closed = true; }  =>  
SDL_68:304:int_close(): try {     this.internal_close();     return RET_OK; } catch ( com.example.socket.MockIOException ex ) {     return IO_EXCEPTION; }  =>   try {     return RET_OK; }
SDL_69:304:int_close(): return RET_OK;  =>   return 0;
SDL_70:315:int_shutdownInput(): try {     internal_shutdownInput();     return RET_OK; } catch ( com.example.socket.MockIOException ex ) {     return IO_EXCEPTION; }  =>   try {     return RET_OK; }
SDL_71:315:int_shutdownInput(): return RET_OK;  =>   return 0;
SDL_72:331:void_internal_shutdownInput(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is already shutdown\" ); } getImpl().shutdownInput(); shutIn = true;  =>   if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is already shutdown\" ); } getImpl().shutdownInput(); shutIn = true;
SDL_73:331:void_internal_shutdownInput(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is already shutdown\" ); } getImpl().shutdownInput(); shutIn = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is already shutdown\" ); } getImpl().shutdownInput(); shutIn = true;
SDL_74:331:void_internal_shutdownInput(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is already shutdown\" ); } getImpl().shutdownInput(); shutIn = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } getImpl().shutdownInput(); shutIn = true;
SDL_75:333:void_internal_shutdownInput(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is already shutdown\" ); } getImpl().shutdownInput(); shutIn = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is already shutdown\" ); } shutIn = true;
SDL_76:333:void_internal_shutdownInput(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is already shutdown\" ); } getImpl().shutdownInput(); shutIn = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is already shutdown\" ); } getImpl().shutdownInput();
SDL_77:324:void_internal_shutdownInput(): throw new java.net.SocketException( \"Socket is closed\" );  =>  
SDL_78:326:void_internal_shutdownInput(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Socket is closed\" ); }
SDL_79:327:void_internal_shutdownInput(): throw new java.net.SocketException( \"Socket is not connected\" );  =>  
SDL_80:329:void_internal_shutdownInput(): if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Socket is not connected\" ); }
SDL_81:330:void_internal_shutdownInput(): throw new java.net.SocketException( \"Socket input is already shutdown\" );  =>  
SDL_82:332:void_internal_shutdownInput(): if (isInputShutdown()) {     throw new java.net.SocketException( \"Socket input is already shutdown\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Socket input is already shutdown\" ); }
SDL_83:342:int_shutdownOutput(): try {     internal_shutdownOutput();     return RET_OK; } catch ( com.example.socket.MockIOException ex ) {     return IO_EXCEPTION; }  =>   try {     return RET_OK; }
SDL_84:342:int_shutdownOutput(): return RET_OK;  =>   return 0;
SDL_85:358:void_internal_shutdownOutput(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is already shutdown\" ); } getImpl().shutdownOutput(); shutOut = true;  =>   if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is already shutdown\" ); } getImpl().shutdownOutput(); shutOut = true;
SDL_86:358:void_internal_shutdownOutput(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is already shutdown\" ); } getImpl().shutdownOutput(); shutOut = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is already shutdown\" ); } getImpl().shutdownOutput(); shutOut = true;
SDL_87:358:void_internal_shutdownOutput(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is already shutdown\" ); } getImpl().shutdownOutput(); shutOut = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } getImpl().shutdownOutput(); shutOut = true;
SDL_88:360:void_internal_shutdownOutput(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is already shutdown\" ); } getImpl().shutdownOutput(); shutOut = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is already shutdown\" ); } shutOut = true;
SDL_89:360:void_internal_shutdownOutput(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is already shutdown\" ); } getImpl().shutdownOutput(); shutOut = true;  =>   if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); } if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); } if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is already shutdown\" ); } getImpl().shutdownOutput();
SDL_90:351:void_internal_shutdownOutput(): throw new java.net.SocketException( \"Socket is closed\" );  =>  
SDL_91:353:void_internal_shutdownOutput(): if (isClosed()) {     throw new java.net.SocketException( \"Socket is closed\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Socket is closed\" ); }
SDL_92:354:void_internal_shutdownOutput(): throw new java.net.SocketException( \"Socket is not connected\" );  =>  
SDL_93:356:void_internal_shutdownOutput(): if (!isConnected()) {     throw new java.net.SocketException( \"Socket is not connected\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Socket is not connected\" ); }
SDL_94:357:void_internal_shutdownOutput(): throw new java.net.SocketException( \"Socket output is already shutdown\" );  =>  
SDL_95:359:void_internal_shutdownOutput(): if (isOutputShutdown()) {     throw new java.net.SocketException( \"Socket output is already shutdown\" ); }  =>   if (true) {     throw new java.net.SocketException( \"Socket output is already shutdown\" ); }
SDL_96:366:boolean_isConnected(): return connected || oldImpl;  =>   return true;
SDL_97:366:boolean_isConnected(): return connected || oldImpl;  =>   return false;
SDL_98:371:boolean_isBound(): return bound || oldImpl;  =>   return true;
SDL_99:371:boolean_isBound(): return bound || oldImpl;  =>   return false;
SDL_100:375:boolean_isClosed(): synchronized (closeLock) {     return closed; }  =>  
SDL_101:384:boolean_isInputShutdown(): return shutIn;  =>   return true;
SDL_102:384:boolean_isInputShutdown(): return shutIn;  =>   return false;
SDL_103:389:boolean_isOutputShutdown(): return shutOut;  =>   return true;
SDL_104:389:boolean_isOutputShutdown(): return shutOut;  =>   return false;
VDL_1:53:void_createImpl(boolean):impl == null => null
VDL_2:66:void_setImpl():factory != null => null
VDL_3:71:void_setImpl():impl != null => null
VDL_4:79:com.example.socket.MockSocketImpl_getImpl():!created =>  
VDL_5:115:void_internal_connect(com.example.socket.MockSocketAddress,int):endpoint == null => null
VDL_6:118:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout < 0 => 0
VDL_7:124:void_internal_connect(com.example.socket.MockSocketAddress,int):!oldImpl =>  
VDL_8:134:void_internal_connect(com.example.socket.MockSocketAddress,int):!created =>  
VDL_9:137:void_internal_connect(com.example.socket.MockSocketAddress,int):!oldImpl =>  
VDL_10:140:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout == 0 => 0
VDL_11:154:void_internal_connect(com.example.socket.MockSocketAddress,int):!connected =>  
VDL_12:177:void_internal_bind(com.example.socket.MockSocketAddress):!oldImpl =>  
VDL_13:180:void_internal_bind(com.example.socket.MockSocketAddress):bindpoint != null => null
VDL_14:184:void_internal_bind(com.example.socket.MockSocketAddress):epoint != null => null
VDL_15:187:void_internal_bind(com.example.socket.MockSocketAddress):epoint == null => null
VDL_16:199:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String):addr == null => null
VDL_17:203:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String):op + ": invalid address type" => ": invalid address type"
VDL_18:365:boolean_isConnected():connected || oldImpl => oldImpl
VDL_19:365:boolean_isConnected():connected || oldImpl => connected
VDL_20:370:boolean_isBound():bound || oldImpl => oldImpl
VDL_21:370:boolean_isBound():bound || oldImpl => bound
ODL_1:53:void_createImpl(boolean):impl == null => impl
ODL_2:53:void_createImpl(boolean):impl == null => null
ODL_3:66:void_setImpl():factory != null => factory
ODL_4:66:void_setImpl():factory != null => null
ODL_5:71:void_setImpl():impl != null => impl
ODL_6:71:void_setImpl():impl != null => null
ODL_7:79:com.example.socket.MockSocketImpl_getImpl():!created => created
ODL_8:115:void_internal_connect(com.example.socket.MockSocketAddress,int):endpoint == null => endpoint
ODL_9:115:void_internal_connect(com.example.socket.MockSocketAddress,int):endpoint == null => null
ODL_10:118:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout < 0 => timeout
ODL_11:118:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout < 0 => 0
ODL_12:124:void_internal_connect(com.example.socket.MockSocketAddress,int):!oldImpl => oldImpl
ODL_13:124:void_internal_connect(com.example.socket.MockSocketAddress,int):!oldImpl && isConnected() => !oldImpl
ODL_14:124:void_internal_connect(com.example.socket.MockSocketAddress,int):!oldImpl && isConnected() => isConnected()
ODL_15:127:void_internal_connect(com.example.socket.MockSocketAddress,int):!(endpoint instanceof com.example.socket.MockInetSocketAddress) => endpoint instanceof com.example.socket.MockInetSocketAddress
ODL_16:134:void_internal_connect(com.example.socket.MockSocketAddress,int):!created => created
ODL_17:137:void_internal_connect(com.example.socket.MockSocketAddress,int):!oldImpl => oldImpl
ODL_18:140:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout == 0 => timeout
ODL_19:140:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout == 0 => 0
ODL_20:154:void_internal_connect(com.example.socket.MockSocketAddress,int):!connected => connected
ODL_21:177:void_internal_bind(com.example.socket.MockSocketAddress):!oldImpl => oldImpl
ODL_22:177:void_internal_bind(com.example.socket.MockSocketAddress):!oldImpl && isBound() => !oldImpl
ODL_23:177:void_internal_bind(com.example.socket.MockSocketAddress):!oldImpl && isBound() => isBound()
ODL_24:180:void_internal_bind(com.example.socket.MockSocketAddress):bindpoint != null => bindpoint
ODL_25:180:void_internal_bind(com.example.socket.MockSocketAddress):bindpoint != null => null
ODL_26:180:void_internal_bind(com.example.socket.MockSocketAddress):!(bindpoint instanceof com.example.socket.MockInetSocketAddress) => bindpoint instanceof com.example.socket.MockInetSocketAddress
ODL_27:180:void_internal_bind(com.example.socket.MockSocketAddress):bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress) => bindpoint != null
ODL_28:180:void_internal_bind(com.example.socket.MockSocketAddress):bindpoint != null && !(bindpoint instanceof com.example.socket.MockInetSocketAddress) => !(bindpoint instanceof com.example.socket.MockInetSocketAddress)
ODL_29:184:void_internal_bind(com.example.socket.MockSocketAddress):epoint != null => epoint
ODL_30:184:void_internal_bind(com.example.socket.MockSocketAddress):epoint != null => null
ODL_31:184:void_internal_bind(com.example.socket.MockSocketAddress):epoint != null && epoint.isUnresolved() => epoint != null
ODL_32:184:void_internal_bind(com.example.socket.MockSocketAddress):epoint != null && epoint.isUnresolved() => epoint.isUnresolved()
ODL_33:187:void_internal_bind(com.example.socket.MockSocketAddress):epoint == null => epoint
ODL_34:187:void_internal_bind(com.example.socket.MockSocketAddress):epoint == null => null
ODL_35:199:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String):addr == null => addr
ODL_36:199:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String):addr == null => null
ODL_37:202:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String):addr instanceof com.example.socket.MockInet4Address || addr instanceof com.example.socket.MockInet6Address => addr instanceof com.example.socket.MockInet4Address
ODL_38:202:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String):addr instanceof com.example.socket.MockInet4Address || addr instanceof com.example.socket.MockInet6Address => addr instanceof com.example.socket.MockInet6Address
ODL_39:202:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String):!(addr instanceof com.example.socket.MockInet4Address || addr instanceof com.example.socket.MockInet6Address) => addr instanceof com.example.socket.MockInet4Address || addr instanceof com.example.socket.MockInet6Address
ODL_40:203:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String):op + ": invalid address type" => op
ODL_41:203:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String):op + ": invalid address type" => ": invalid address type"
ODL_42:224:java.io.InputStream_internal_getInputStream():!isConnected() => isConnected()
ODL_43:262:java.io.OutputStream_internal_getOutputStream():!isConnected() => isConnected()
ODL_44:326:void_internal_shutdownInput():!isConnected() => isConnected()
ODL_45:353:void_internal_shutdownOutput():!isConnected() => isConnected()
ODL_46:365:boolean_isConnected():connected || oldImpl => connected
ODL_47:365:boolean_isConnected():connected || oldImpl => oldImpl
ODL_48:370:boolean_isBound():bound || oldImpl => bound
ODL_49:370:boolean_isBound():bound || oldImpl => oldImpl
CDL_1:53:void_createImpl(boolean):impl == null => impl
CDL_2:66:void_setImpl():factory != null => factory
CDL_3:71:void_setImpl():impl != null => impl
CDL_4:115:void_internal_connect(com.example.socket.MockSocketAddress,int):endpoint == null => endpoint
CDL_5:118:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout < 0 => timeout
CDL_6:127:void_internal_connect(com.example.socket.MockSocketAddress,int):!(endpoint instanceof com.example.socket.MockInetSocketAddress) =>  
CDL_7:140:void_internal_connect(com.example.socket.MockSocketAddress,int):timeout == 0 => timeout
CDL_8:180:void_internal_bind(com.example.socket.MockSocketAddress):bindpoint != null => bindpoint
CDL_9:180:void_internal_bind(com.example.socket.MockSocketAddress):!(bindpoint instanceof com.example.socket.MockInetSocketAddress) =>  
CDL_10:184:void_internal_bind(com.example.socket.MockSocketAddress):epoint != null => epoint
CDL_11:187:void_internal_bind(com.example.socket.MockSocketAddress):epoint == null => epoint
CDL_12:199:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String):addr == null => addr
CDL_13:202:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String):addr instanceof com.example.socket.MockInet4Address || addr instanceof com.example.socket.MockInet6Address => addr instanceof com.example.socket.MockInet6Address
CDL_14:202:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String):addr instanceof com.example.socket.MockInet4Address || addr instanceof com.example.socket.MockInet6Address => addr instanceof com.example.socket.MockInet4Address
CDL_15:203:void_checkAddress(com.example.socket.MockInetAddress,java.lang.String):op + ": invalid address type" => op
